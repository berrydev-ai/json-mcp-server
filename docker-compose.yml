# Docker Compose for Local Testing
# Contains all HTTP transport server variants using local Dockerfile
#
# Usage:
#   # Start all services
#   docker-compose up -d
#   
#   # Start specific service
#   docker-compose up -d basic
#   docker-compose up -d auth
#   docker-compose up -d s3
#   docker-compose up -d production
#
# Services run on different ports to avoid conflicts:
#   - basic: http://localhost:3000
#   - auth: http://localhost:8080  
#   - s3: http://localhost:3001
#   - production: http://localhost:8081

version: '3.8'

services:
  # Basic HTTP server variant
  basic:
    build: .
    container_name: json-mcp-server-basic-local
    ports:
      - "3000:3000"
    environment:
      - TRANSPORT=http
      - VERBOSE=true
      - HOST=0.0.0.0
      - PORT=3000
      - CORS_ORIGIN=*
      - FILE_PATH=/app/test-data.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Authenticated HTTP server variant
  auth:
    build: .
    container_name: json-mcp-server-auth-local
    ports:
      - "8080:8080"
    volumes:
      - ./test-data:/data
      - ./logs:/logs
    environment:
      - TRANSPORT=http
      - VERBOSE=true
      - HOST=0.0.0.0
      - PORT=8080
      - CORS_ORIGIN=https://yourapp.com,http://localhost:3000
      - AUTH_TOKEN=${AUTH_TOKEN:-test-auth-token-12345}
      - FILE_PATH=/data/data.json
      - LOG_FILE=/logs/auth-server.log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # S3-enabled HTTP server variant
  s3:
    build: .
    container_name: json-mcp-server-s3-local
    ports:
      - "3001:3001"
    volumes:
      - ./test-data:/data
      - ./logs:/logs
    environment:
      - TRANSPORT=http
      - VERBOSE=true
      - HOST=0.0.0.0
      - PORT=3001
      - CORS_ORIGIN=*
      - S3_URI=${S3_URI:-}
      - FILE_PATH=/data/synced-data.json
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - LOG_FILE=/logs/s3-server.log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s  # Longer for potential S3 sync
    restart: unless-stopped

  # Production HTTP server variant
  production:
    build: .
    container_name: json-mcp-server-production-local
    ports:
      - "8081:8081"
    volumes:
      - ./test-data:/data
      - ./logs:/logs
    environment:
      - TRANSPORT=http
      - VERBOSE=${VERBOSE:-false}
      - HOST=0.0.0.0
      - PORT=8081
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourapp.com}
      - AUTH_TOKEN=${AUTH_TOKEN:-production-test-token-67890}
      - FILE_PATH=/data/production-data.json
      - LOG_FILE=/logs/production-server.log
      - S3_URI=${S3_URI:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - MCP_VERSION=${MCP_VERSION:-1.2.0}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# Create shared volumes for data persistence
volumes:
  test-data:
  logs:

# Example .env file content:
# AUTH_TOKEN=your-test-auth-token
# S3_URI=s3://your-test-bucket/data.json
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-test-key
# AWS_SECRET_ACCESS_KEY=your-test-secret
# VERBOSE=true
# CORS_ORIGIN=http://localhost:3000,http://localhost:8080